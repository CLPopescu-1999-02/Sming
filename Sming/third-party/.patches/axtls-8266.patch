diff -Nuar a/replacements/libc.c b/replacements/libc.c
--- a/replacements/libc.c   1970-01-01 01:00:00.000000000 +0100
+++ b/replacements/libc.c   2016-11-21 11:03:47.152184514 +0100
@@ -0,0 +1,29 @@
+/*
+ libc_replacements.c - replaces libc functions with functions
+ from Espressif SDK
+ Copyright (c) 2015 Ivan Grokhotkov. All rights reserved.
+ This file is part of the esp8266 core for Arduino environment.
+ This library is free software; you can redistribute it and/or
+ modify it under the terms of the GNU Lesser General Public
+ License as published by the Free Software Foundation; either
+ version 2.1 of the License, or (at your option) any later version.
+ This library is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ Lesser General Public License for more details.
+ You should have received a copy of the GNU Lesser General Public
+ License along with this library; if not, write to the Free Software
+ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ Modified 03 April 2015 by Markus Sattler
+ */
+
+#include <stdint.h>
+#include "espinc/c_types_compatible.h"
+#include <stdarg.h>
+
+extern int ets_putc(int);
+extern int ets_vprintf(int (*print_function)(int), const char * format, va_list arg);
+
+int vprintf(const char * format, va_list arg) {
+    return ets_vprintf(ets_putc, format, arg);
+}
diff --git a/Makefile b/Makefile
index e48e869..e632b44 100644
--- a/Makefile
+++ b/Makefile
@@ -5,6 +5,9 @@ LD := $(TOOLCHAIN_PREFIX)gcc
 OBJCOPY := $(TOOLCHAIN_PREFIX)objcopy
 
 XTENSA_LIBS ?= $(shell $(CC) -print-sysroot)
+ifeq ($(XTENSA_LIBS),)
+   XTENSA_LIBS = $(ESP_HOME)/xtensa-lx106-elf/
+endif
 
 TOOLCHAIN_DIR=$(shell cd $(XTENSA_LIBS)/../../; pwd)
 
@@ -48,15 +51,24 @@ CFLAGS += -ffunction-sections -fdata-sections
 
 CFLAGS += -fdebug-prefix-map=$(PWD)= -fdebug-prefix-map=$(TOOLCHAIN_DIR)=xtensa-lx106-elf -gno-record-gcc-switches
 
-MFORCE32 := $(shell $(CC) --help=target | grep mforce-l32)
-ifneq ($(MFORCE32),)
-    # If the compiler supports the -mforce-l32 flag, the compiler will generate correct code for loading
-    # 16- and 8-bit constants from program memory. So in the code we can directly access the arrays
-    # placed into program memory.
-    CFLAGS +=  -mforce-l32
-else
-	# Otherwise we need to use a helper function to load 16- and 8-bit constants from program memory.
-    CFLAGS += -DWITH_PGM_READ_HELPER
+CFLAGS += $(CFLAGS_EXTRA)
+
+WITH_PGM_READ_HELPER ?= 1
+
+ifeq ($(WITH_PGM_READ_HELPER), 0)
+   MFORCE32 := $(shell $(CC) --help=target | grep mforce-l32)
+   ifneq ($(MFORCE32),)
+        # If the compiler supports the -mforce-l32 flag, the compiler will generate correct code for loading
+       # 16- and 8-bit constants from program memory. So in the code we can directly access the arrays
+       # placed into program memory.
+       CFLAGS +=  -mforce-l32
+    else
+       WITH_PGM_READ_HELPER=1
+   endif
+endif
+
+ifeq ($(WITH_PGM_READ_HELPER), 1)
+   CFLAGS += -DWITH_PGM_READ_HELPER
 endif
 
 BIN_DIR := bin
diff --git a/replacements/time.c b/replacements/time.c
index 4972119..f6f44f8 100644
--- a/replacements/time.c
+++ b/replacements/time.c
@@ -24,17 +24,19 @@ extern uint64_t system_mktime(uint32_t year, uint32_t mon, uint32_t day, uint32_
 
 static int errno_var = 0;
 
-int* __errno(void) {
+#define WEAK_ATTR __attribute__((weak))
+
+int* WEAK_ATTR __errno(void) {
     // DEBUGV("__errno is called last error: %d (not current)\n", errno_var);
     return &errno_var;
 }
 
-unsigned long millis(void)
+unsigned long WEAK_ATTR millis(void)
 {
 	return system_get_time() / 1000UL;
 }
 
-unsigned long micros(void)
+unsigned long WEAK_ATTR micros(void)
 {
 	return system_get_time();
 }
@@ -79,7 +81,7 @@ static void setServer(int id, const char* name_or_ip)
     }
 }
 
-void configTime(int timezone, int daylightOffset_sec, const char* server1, const char* server2, const char* server3)
+void WEAK_ATTR configTime(int timezone, int daylightOffset_sec, const char* server1, const char* server2, const char* server3)
 {
     sntp_stop();
 
@@ -93,7 +95,7 @@ void configTime(int timezone, int daylightOffset_sec, const char* server1, const
     sntp_init();
 }
 
-int clock_gettime(clockid_t unused, struct timespec *tp)
+int WEAK_ATTR clock_gettime(clockid_t unused, struct timespec *tp)
 {
     tp->tv_sec  = millis() / 1000;
     tp->tv_nsec = micros() * 1000;
@@ -101,14 +103,14 @@ int clock_gettime(clockid_t unused, struct timespec *tp)
 }
 
 // seconds since 1970
-time_t mktime(struct tm *t)
+time_t WEAK_ATTR mktime(struct tm *t)
 {
     // system_mktime expects month in range 1..12
     #define START_MONTH 1
     return DIFF1900TO1970 + system_mktime(t->tm_year, t->tm_mon + START_MONTH, t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec);
 }
 
-time_t time(time_t * t)
+time_t WEAK_ATTR time(time_t * t)
 {
     time_t seconds = sntp_get_current_timestamp();
     if (t)
@@ -118,24 +120,24 @@ time_t time(time_t * t)
     return seconds;
 }
 
-char* asctime(const struct tm *t)
+char* WEAK_ATTR asctime(const struct tm *t)
 {
     return sntp_asctime(t);
 }
 
-struct tm* localtime(const time_t *clock)
+struct tm* WEAK_ATTR localtime(const time_t *clock)
 {
     return sntp_localtime(clock);
 }
 
-char* ctime(const time_t *t)
+char* WEAK_ATTR ctime(const time_t *t)
 {
     struct tm* p_tm = localtime(t);
     char* result = asctime(p_tm);
     return result;
 }
 
-int gettimeofday(struct timeval *tp, void *tzp)
+int WEAK_ATTR gettimeofday(struct timeval *tp, void *tzp)
 {
     if (tp)
     {
diff --git a/ssl/os_port.h b/ssl/os_port.h
index b67066c..d92585e 100644
--- a/ssl/os_port.h
+++ b/ssl/os_port.h
@@ -53,6 +53,8 @@ extern "C" {
 #define EXP_FUNC
 #endif
 
+#ifndef SMING_INCLUDED
+
 #if defined(_WIN32_WCE)
 #undef WIN32
 #define WIN32
@@ -92,7 +94,8 @@ extern "C" {
 #define be64toh(x) __bswap_constant_64(x)
 #endif
 
-void ax_wdt_feed();
+extern void system_soft_wdt_feed(void);
+#define ax_wdt_feed system_soft_wdt_feed
 
 #ifndef PROGMEM
 #define PROGMEM __attribute__((aligned(4))) __attribute__((section(".irom.text")))
@@ -150,8 +153,8 @@ extern int ets_printf(const char *format, ...)  __attribute__ ((format (printf,
 extern int ets_putc(int);
 
 // The network interface in WiFiClientSecure
-extern int ax_port_read(int fd, uint8_t* buffer, size_t count);
-extern int ax_port_write(int fd, uint8_t* buffer, size_t count);
+extern int ax_port_read(int fd, uint8_t* buffer, int count);
+extern int ax_port_write(int fd, uint8_t* buffer, uint16_t count);
 
 // TODO: Why is this not being imported from <string.h>?
 extern char *strdup(const char *orig);
@@ -248,6 +251,7 @@ EXP_FUNC int STDCALL getdomainname(char *buf, int buf_size);
 #endif  /* Not Win32 */
 
 /* some functions to mutate the way these work */
+#ifndef ntohl
 inline uint32_t htonl(uint32_t n){
   return ((n & 0xff) << 24) |
     ((n & 0xff00) << 8) |
@@ -256,6 +260,7 @@ inline uint32_t htonl(uint32_t n){
 }
 
 #define ntohl htonl
+#endif
 
 EXP_FUNC int STDCALL ax_open(const char *pathname, int flags); 
 
@@ -292,6 +297,8 @@ void exit_now(const char *format, ...);
 #define PROGMEM
 #endif
 
+#endif /* SMING_INCLUDED */
+
 #ifdef __cplusplus
 }
 #endif
