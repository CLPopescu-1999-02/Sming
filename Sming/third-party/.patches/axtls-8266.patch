diff -Nuar a/replacements/libc.c b/replacements/libc.c
--- a/replacements/libc.c	1970-01-01 01:00:00.000000000 +0100
+++ b/replacements/libc.c	2016-11-21 11:03:47.152184514 +0100
@@ -0,0 +1,29 @@
+/*
+ libc_replacements.c - replaces libc functions with functions
+ from Espressif SDK
+ Copyright (c) 2015 Ivan Grokhotkov. All rights reserved.
+ This file is part of the esp8266 core for Arduino environment.
+ This library is free software; you can redistribute it and/or
+ modify it under the terms of the GNU Lesser General Public
+ License as published by the Free Software Foundation; either
+ version 2.1 of the License, or (at your option) any later version.
+ This library is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ Lesser General Public License for more details.
+ You should have received a copy of the GNU Lesser General Public
+ License along with this library; if not, write to the Free Software
+ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ Modified 03 April 2015 by Markus Sattler
+ */
+
+#include <stdint.h>
+#include "espinc/c_types_compatible.h"
+#include <stdarg.h>
+
+extern int ets_putc(int);
+extern int ets_vprintf(int (*print_function)(int), const char * format, va_list arg);
+
+int vprintf(const char * format, va_list arg) {
+    return ets_vprintf(ets_putc, format, arg);
+}
diff -Nuar a/replacements/mem.c b/replacements/mem.c
--- a/replacements/mem.c	1970-01-01 01:00:00.000000000 +0100
+++ b/replacements/mem.c	2016-11-21 11:02:07.672185632 +0100
@@ -0,0 +1,81 @@
+/*
+ * Memory functions for ESP8266 taken from Arduino-Esp project
+
+  WiFiClientSecure.cpp - Variant of WiFiClient with TLS support
+  Copyright (c) 2015 Ivan Grokhotkov. All rights reserved.
+  This file is part of the esp8266 core for Arduino environment.
+
+
+  This library is free software; you can redistribute it and/or
+  modify it under the terms of the GNU Lesser General Public
+  License as published by the Free Software Foundation; either
+  version 2.1 of the License, or (at your option) any later version.
+
+  This library is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  Lesser General Public License for more details.
+
+  You should have received a copy of the GNU Lesser General Public
+  License along with this library; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+
+*/
+
+#include <stdint.h>
+#include "espinc/c_types_compatible.h"
+
+// Those Espressif functions are needed
+extern void *pvPortMalloc(size_t xWantedSize, const char *file, uint32 line);
+extern void *pvPortRealloc(void* ptr, size_t xWantedSize, const char *file, uint32 line);
+extern void vPortFree(void *ptr, const char *file, uint32 line);
+extern void *ets_memset(void *s, int c, size_t n);
+
+#include "mem_manager.h"
+
+#define free os_free
+#define malloc os_malloc
+#define realloc os_realloc
+#define memset ets_memset
+
+#ifdef DEBUG_TLS_MEM
+extern int m_printf(const char *fmt, ...);
+#define DEBUG_TLS_MEM_PRINT(...) m_printf(__VA_ARGS__)
+#else
+#define DEBUG_TLS_MEM_PRINT(...)
+#endif
+
+void* ax_port_malloc(size_t size, const char* file, int line) {
+    void* result = (void *)malloc(size);
+
+    if (result == NULL) {
+        DEBUG_TLS_MEM_PRINT("%s:%d malloc %d failed, left %d\r\n", file, line, size, system_get_free_heap_size());
+
+        while(true){}
+    }
+    if (size >= 1024)
+        DEBUG_TLS_MEM_PRINT("%s:%d malloc %d, left %d\r\n", file, line, size, system_get_free_heap_size());
+    return result;
+}
+
+void* ax_port_calloc(size_t size, size_t count, const char* file, int line) {
+    void* result = (void* )ax_port_malloc(size * count, file, line);
+    memset(result, 0, size * count);
+    return result;
+}
+
+void* ax_port_realloc(void* ptr, size_t size, const char* file, int line) {
+    void* result = (void* )realloc(ptr, size);
+    if (result == NULL) {
+        DEBUG_TLS_MEM_PRINT("%s:%d realloc %d failed, left %d\r\n", file, line, size, system_get_free_heap_size());
+        while(true){}
+    }
+    if (size >= 1024)
+        DEBUG_TLS_MEM_PRINT("%s:%d realloc %d, left %d\r\n", file, line, size, system_get_free_heap_size());
+    return result;
+}
+
+void ax_port_free(void* ptr) {
+    free(ptr);
+    DEBUG_TLS_MEM_PRINT("free %x, left %d\r\n", ptr, system_get_free_heap_size());
+}
diff --git a/Makefile b/Makefile
index e48e869..e0ae51c 100644
--- a/Makefile
+++ b/Makefile
@@ -5,6 +5,9 @@ LD := $(TOOLCHAIN_PREFIX)gcc
 OBJCOPY := $(TOOLCHAIN_PREFIX)objcopy
 
 XTENSA_LIBS ?= $(shell $(CC) -print-sysroot)
+ifeq ($(XTENSA_LIBS),)
+       XTENSA_LIBS = $(ESP_HOME)/xtensa-lx106-elf/
+endif
 
 TOOLCHAIN_DIR=$(shell cd $(XTENSA_LIBS)/../../; pwd)
 
@@ -59,6 +62,8 @@ else
     CFLAGS += -DWITH_PGM_READ_HELPER
 endif
 
+CFLAGS += $(CFLAGS_EXTRA)
+
 BIN_DIR := bin
 AXTLS_AR := $(BIN_DIR)/libaxtls.a
 
diff --git a/ssl/os_port.h b/ssl/os_port.h
index 0737796..d247d0e 100644
--- a/ssl/os_port.h
+++ b/ssl/os_port.h
@@ -44,6 +44,7 @@ extern "C" {
 #include "os_int.h"
 #include "config.h"
 #include <stdio.h>
+#include "debug_progmem.h"
 
 #ifdef WIN32
 #define STDCALL                 __stdcall
@@ -60,18 +61,25 @@ extern "C" {
 
 #if defined(ESP8266)
 
+extern int ax_port_read(int clientfd, uint8_t *buf, int bytes_needed);
+extern int ax_port_write(int clientfd, uint8_t *buf, uint16_t bytes_needed);
+
 #include "util/time.h"
+extern void gettimeofday(struct timeval* t,void* timezone);
+
 #include <errno.h>
 #define alloca(size) __builtin_alloca(size)
 #define TTY_FLUSH()
 #ifdef putc
 #undef putc
 #endif
-#define putc(x, f)   ets_putc(x)
+#define putc(x, f)   debug_i("%c", (x))
 #ifdef printf
 #undef printf
 #endif
-#define printf(...)  ets_printf(__VA_ARGS__)
+#define printf  debug_i
+#define snprintf m_snprintf
+#define vprintf m_vprintf
 
 #define SOCKET_READ(A,B,C)      ax_port_read(A,B,C)
 #define SOCKET_WRITE(A,B,C)     ax_port_write(A,B,C)
@@ -96,7 +104,8 @@ extern "C" {
 #define be64toh(x) __bswap_constant_64(x)
 #endif
 
-void ax_wdt_feed();
+extern void system_soft_wdt_feed(void);
+#define ax_wdt_feed system_soft_wdt_feed
 
 #ifndef PROGMEM
 #define PROGMEM __attribute__((aligned(4))) __attribute__((section(".irom.text")))
@@ -215,6 +224,18 @@ EXP_FUNC int STDCALL getdomainname(char *buf, int buf_size);
 #endif  /* Not Win32 */
 
 /* some functions to mutate the way these work */
+#define malloc(A)       ax_port_malloc(A, __FILE__, __LINE__)
+#ifndef realloc
+#define realloc(A,B)    ax_port_realloc(A,B, __FILE__, __LINE__)
+#endif
+#define calloc(A,B)     ax_port_calloc(A,B, __FILE__, __LINE__)
+#define free(x)         ax_port_free(x)
+
+EXP_FUNC void * STDCALL ax_port_malloc(size_t s, const char*, int);
+EXP_FUNC void * STDCALL ax_port_realloc(void *y, size_t s, const char*, int);
+EXP_FUNC void * STDCALL ax_port_calloc(size_t n, size_t s, const char*, int);
+EXP_FUNC void * STDCALL ax_port_free(void*);
+
 inline uint32_t htonl(uint32_t n){
   return ((n & 0xff) << 24) |
     ((n & 0xff00) << 8) |
diff --git a/ssl/tls1.c b/ssl/tls1.c
index fcc0bba..a728526 100644
--- a/ssl/tls1.c
+++ b/ssl/tls1.c
@@ -1363,6 +1363,9 @@ int basic_read(SSL *ssl, uint8_t **in_data)
     int read_len, is_client = IS_SET_SSL_FLAG(SSL_IS_CLIENT);
     uint8_t *buf = ssl->bm_data;
 
+    if (ssl->can_free_certificates) {
+        certificate_free(ssl);
+    }
     if (IS_SET_SSL_FLAG(SSL_SENT_CLOSE_NOTIFY))
         return SSL_CLOSE_NOTIFY;
 
@@ -2284,8 +2287,15 @@ void DISPLAY_STATE(SSL *ssl, int is_send, uint8_t state, int not_ok)
     if (!IS_SET_SSL_FLAG(SSL_DISPLAY_STATES))
         return;
 
-    printf(not_ok ? "Error - invalid State:\t" : "State:\t");
-    printf(is_send ? "sending " : "receiving ");
+    if(not_ok)
+    	printf("Error - invalid State:\t");
+    else
+    	printf("State:\t");
+
+    if(is_send)
+    	printf("sending ");
+    else
+    	printf("receiving ");
 
     switch (state)
     {
diff --git a/ssl/tls1.h b/ssl/tls1.h
index 9f49268..e3392bf 100644
--- a/ssl/tls1.h
+++ b/ssl/tls1.h
@@ -43,7 +43,6 @@ extern "C" {
 #include "version.h"
 #include "config.h"
 #include "os_int.h"
-#include "os_port.h"
 #include "crypto.h"
 #include "crypto_misc.h"
 
diff --git a/tools/make_certs.sh b/tools/make_certs.sh
index fc6cc90..d004fa8 100644
--- a/tools/make_certs.sh
+++ b/tools/make_certs.sh
@@ -29,7 +29,12 @@
 # THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #
 
-AXDIR=`pwd`/`dirname $0`
+OLDCWD=`pwd`
+
+if [ -z $AXDIR ]; then
+	AXDIR = $OLDCWD/`dirname $0`
+fi
+
 CWD=`mktemp -d` && cd $dir
 cd $CWD 
 
@@ -251,6 +256,6 @@ cat axTLS.ca_x509.pem >> axTLS.x509_device.pem
 
 # set default key/cert for use in the server
 xxd -i axTLS.x509_1024.cer | sed -e \
-        "s/axTLS_x509_1024_cer/default_certificate/" > $AXDIR/../ssl/cert.h
+        "s/axTLS_x509_1024_cer/default_certificate/" > $AXDIR/cert.h
 xxd -i axTLS.key_1024 | sed -e \
-        "s/axTLS_key_1024/default_private_key/" > $AXDIR/../ssl/private_key.h
+        "s/axTLS_key_1024/default_private_key/" > $AXDIR/private_key.h
diff --git a/replacements/time.c b/replacements/time.c
index 4972119..f6f44f8 100644
--- a/replacements/time.c
+++ b/replacements/time.c
@@ -24,17 +24,19 @@ extern uint64_t system_mktime(uint32_t year, uint32_t mon, uint32_t day, uint32_
 
 static int errno_var = 0;
 
-int* __errno(void) {
+#define WEAK_ATTR __attribute__((weak))
+
+int* WEAK_ATTR __errno(void) {
     // DEBUGV("__errno is called last error: %d (not current)\n", errno_var);
     return &errno_var;
 }
 
-unsigned long millis(void)
+unsigned long WEAK_ATTR millis(void)
 {
 	return system_get_time() / 1000UL;
 }
 
-unsigned long micros(void)
+unsigned long WEAK_ATTR micros(void)
 {
 	return system_get_time();
 }
@@ -79,7 +81,7 @@ static void setServer(int id, const char* name_or_ip)
     }
 }
 
-void configTime(int timezone, int daylightOffset_sec, const char* server1, const char* server2, const char* server3)
+void WEAK_ATTR configTime(int timezone, int daylightOffset_sec, const char* server1, const char* server2, const char* server3)
 {
     sntp_stop();
 
@@ -93,7 +95,7 @@ void configTime(int timezone, int daylightOffset_sec, const char* server1, const
     sntp_init();
 }
 
-int clock_gettime(clockid_t unused, struct timespec *tp)
+int WEAK_ATTR clock_gettime(clockid_t unused, struct timespec *tp)
 {
     tp->tv_sec  = millis() / 1000;
     tp->tv_nsec = micros() * 1000;
@@ -101,14 +103,14 @@ int clock_gettime(clockid_t unused, struct timespec *tp)
 }
 
 // seconds since 1970
-time_t mktime(struct tm *t)
+time_t WEAK_ATTR mktime(struct tm *t)
 {
     // system_mktime expects month in range 1..12
     #define START_MONTH 1
     return DIFF1900TO1970 + system_mktime(t->tm_year, t->tm_mon + START_MONTH, t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec);
 }
 
-time_t time(time_t * t)
+time_t WEAK_ATTR time(time_t * t)
 {
     time_t seconds = sntp_get_current_timestamp();
     if (t)
@@ -118,24 +120,24 @@ time_t time(time_t * t)
     return seconds;
 }
 
-char* asctime(const struct tm *t)
+char* WEAK_ATTR asctime(const struct tm *t)
 {
     return sntp_asctime(t);
 }
 
-struct tm* localtime(const time_t *clock)
+struct tm* WEAK_ATTR localtime(const time_t *clock)
 {
     return sntp_localtime(clock);
 }
 
-char* ctime(const time_t *t)
+char* WEAK_ATTR ctime(const time_t *t)
 {
     struct tm* p_tm = localtime(t);
     char* result = asctime(p_tm);
     return result;
 }
 
-int gettimeofday(struct timeval *tp, void *tzp)
+int WEAK_ATTR gettimeofday(struct timeval *tp, void *tzp)
 {
     if (tp)
     {
