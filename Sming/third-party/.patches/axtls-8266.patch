diff --git a/Makefile b/Makefile
index e48e869..e54cdb6 100644
--- a/Makefile
+++ b/Makefile
@@ -5,6 +5,9 @@ LD := $(TOOLCHAIN_PREFIX)gcc
 OBJCOPY := $(TOOLCHAIN_PREFIX)objcopy
 
 XTENSA_LIBS ?= $(shell $(CC) -print-sysroot)
+ifeq ($(XTENSA_LIBS),)
+	XTENSA_LIBS = $(ESP_HOME)/xtensa-lx106-elf/
+endif
 
 TOOLCHAIN_DIR=$(shell cd $(XTENSA_LIBS)/../../; pwd)
 
@@ -48,6 +51,8 @@ CFLAGS += -ffunction-sections -fdata-sections
 
 CFLAGS += -fdebug-prefix-map=$(PWD)= -fdebug-prefix-map=$(TOOLCHAIN_DIR)=xtensa-lx106-elf -gno-record-gcc-switches
 
+CFLAGS += $(CFLAGS_EXTRA)
+
 MFORCE32 := $(shell $(CC) --help=target | grep mforce-l32)
 ifneq ($(MFORCE32),)
     # If the compiler supports the -mforce-l32 flag, the compiler will generate correct code for loading
diff --git a/replacements/time.c b/replacements/time.c
index 4972119..f6f44f8 100644
--- a/replacements/time.c
+++ b/replacements/time.c
@@ -24,17 +24,19 @@ extern uint64_t system_mktime(uint32_t year, uint32_t mon, uint32_t day, uint32_
 
 static int errno_var = 0;
 
-int* __errno(void) {
+#define WEAK_ATTR __attribute__((weak))
+
+int* WEAK_ATTR __errno(void) {
     // DEBUGV("__errno is called last error: %d (not current)\n", errno_var);
     return &errno_var;
 }
 
-unsigned long millis(void)
+unsigned long WEAK_ATTR millis(void)
 {
 	return system_get_time() / 1000UL;
 }
 
-unsigned long micros(void)
+unsigned long WEAK_ATTR micros(void)
 {
 	return system_get_time();
 }
@@ -79,7 +81,7 @@ static void setServer(int id, const char* name_or_ip)
     }
 }
 
-void configTime(int timezone, int daylightOffset_sec, const char* server1, const char* server2, const char* server3)
+void WEAK_ATTR configTime(int timezone, int daylightOffset_sec, const char* server1, const char* server2, const char* server3)
 {
     sntp_stop();
 
@@ -93,7 +95,7 @@ void configTime(int timezone, int daylightOffset_sec, const char* server1, const
     sntp_init();
 }
 
-int clock_gettime(clockid_t unused, struct timespec *tp)
+int WEAK_ATTR clock_gettime(clockid_t unused, struct timespec *tp)
 {
     tp->tv_sec  = millis() / 1000;
     tp->tv_nsec = micros() * 1000;
@@ -101,14 +103,14 @@ int clock_gettime(clockid_t unused, struct timespec *tp)
 }
 
 // seconds since 1970
-time_t mktime(struct tm *t)
+time_t WEAK_ATTR mktime(struct tm *t)
 {
     // system_mktime expects month in range 1..12
     #define START_MONTH 1
     return DIFF1900TO1970 + system_mktime(t->tm_year, t->tm_mon + START_MONTH, t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec);
 }
 
-time_t time(time_t * t)
+time_t WEAK_ATTR time(time_t * t)
 {
     time_t seconds = sntp_get_current_timestamp();
     if (t)
@@ -118,24 +120,24 @@ time_t time(time_t * t)
     return seconds;
 }
 
-char* asctime(const struct tm *t)
+char* WEAK_ATTR asctime(const struct tm *t)
 {
     return sntp_asctime(t);
 }
 
-struct tm* localtime(const time_t *clock)
+struct tm* WEAK_ATTR localtime(const time_t *clock)
 {
     return sntp_localtime(clock);
 }
 
-char* ctime(const time_t *t)
+char* WEAK_ATTR ctime(const time_t *t)
 {
     struct tm* p_tm = localtime(t);
     char* result = asctime(p_tm);
     return result;
 }
 
-int gettimeofday(struct timeval *tp, void *tzp)
+int WEAK_ATTR gettimeofday(struct timeval *tp, void *tzp)
 {
     if (tp)
     {
diff --git a/ssl/os_port.h b/ssl/os_port.h
index ded2c48..4f78682 100644
--- a/ssl/os_port.h
+++ b/ssl/os_port.h
@@ -44,6 +44,7 @@ extern "C" {
 #include "os_int.h"
 #include "config.h"
 #include <stdio.h>
+#include "debug_progmem.h"
 
 #ifdef WIN32
 #define STDCALL                 __stdcall
@@ -60,14 +61,25 @@ extern "C" {
 
 #if defined(ESP8266)
 
+extern int ax_port_read(int clientfd, uint8_t *buf, int bytes_needed);
+extern int ax_port_write(int clientfd, uint8_t *buf, uint16_t bytes_needed);
+
 #include "util/time.h"
+extern void gettimeofday(struct timeval* t,void* timezone);
+
 #include <errno.h>
 #define alloca(size) __builtin_alloca(size)
 #define TTY_FLUSH()
 #ifdef putc
 #undef putc
 #endif
-#define putc(x, f)   ets_putc(x)
+#define putc(x, f)   debug_i("%c", (x))
+#ifdef printf
+#undef printf
+#endif
+#define printf  debug_i
+#define snprintf m_snprintf
+#define vprintf m_vprintf
 
 #define SOCKET_READ(A,B,C)      ax_port_read(A,B,C)
 #define SOCKET_WRITE(A,B,C)     ax_port_write(A,B,C)
@@ -92,7 +104,8 @@ extern "C" {
 #define be64toh(x) __bswap_constant_64(x)
 #endif
 
-void ax_wdt_feed();
+extern void system_soft_wdt_feed(void);
+#define ax_wdt_feed system_soft_wdt_feed
 
 #ifndef PROGMEM
 #define PROGMEM __attribute__((aligned(4))) __attribute__((section(".irom.text")))
@@ -232,6 +245,18 @@ EXP_FUNC int STDCALL getdomainname(char *buf, int buf_size);
 #endif  /* Not Win32 */
 
 /* some functions to mutate the way these work */
+#define malloc(A)       ax_port_malloc(A, __FILE__, __LINE__)
+#ifndef realloc
+#define realloc(A,B)    ax_port_realloc(A,B, __FILE__, __LINE__)
+#endif
+#define calloc(A,B)     ax_port_calloc(A,B, __FILE__, __LINE__)
+#define free(x)         ax_port_free(x)
+
+EXP_FUNC void * STDCALL ax_port_malloc(size_t s, const char*, int);
+EXP_FUNC void * STDCALL ax_port_realloc(void *y, size_t s, const char*, int);
+EXP_FUNC void * STDCALL ax_port_calloc(size_t n, size_t s, const char*, int);
+EXP_FUNC void * STDCALL ax_port_free(void*);
+
 inline uint32_t htonl(uint32_t n){
   return ((n & 0xff) << 24) |
     ((n & 0xff00) << 8) |
diff --git a/ssl/tls1.h b/ssl/tls1.h
index 31d6b0b..fb7f5e4 100644
--- a/ssl/tls1.h
+++ b/ssl/tls1.h
@@ -43,7 +43,6 @@ extern "C" {
 #include "version.h"
 #include "config.h"
 #include "os_int.h"
-#include "os_port.h"
 #include "crypto.h"
 #include "crypto_misc.h"
 
